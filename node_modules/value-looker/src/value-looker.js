var colors = require('colors');
var configs = require('./config');
var theme = configs.colorTheme;

colors.setTheme(theme);

/**
 * 描述: 看值器（Value-Looker) v2.0.1
 * @arg value [string, optional] 如果不填，将显示说明
 * @arg config [object (val, title, json, indent), optional] 参数配置，说明如下：
 * @arg config.val [boolen, optional] 如果是true，将直接返回得到格式化的对象或Json对象
 * @arg config.title [string, optional] 看值器的标题
 * @arg config.json [boolen, optional] 是否返回Json化的值
 * @arg config.indent [number, optional] 返回的格式化的缩进值.
 * */
module.exports = function valueLooker(value, config) {
    if(config && config.hasOwnProperty('val') && config.val === true) {
        return formatterObject(value, config);
    }
    switch (typeof value) {
        case 'function': value = String(value); break;
        case 'object': value = formatterObject(value, config); break;
        default : break;
    }
    if (value === 'help') {
        value = configs.helpText;
    } {
        if (config && config.hasOwnProperty('theme') && theme.hasOwnProperty(config.theme)) {
            value = value[config.theme];
        } else {
            if (typeof value === 'string') {
                value = value.data;
            } else {
                value = String(value).error;
            }
        }
    }
    var title = 'Msg From Value-Looker' + configs.version;
    if (config && config.hasOwnProperty('title') && config.title && typeof title === 'string') {
        title = config.title;
    }
    title = title.replace(/\s*$/, '').substr(-1) === ':' ? title : title + ':';
    var b = '--------------------------------';
    console.log('\n' + title.info + '\n' + b + b + '\n' + value + '\n' + b + b + '\n');
};

/**
 * 描述: 获取格式化的对象或Json对象字符串
 * @arg object [object]
 * @arg config [object, optional] 配置参数
 * @arg level [number, optional] 缩进层数
 * */
function formatterObject(object, config, level) {
    if (typeof object !== 'object') throw new Error('First argument must be an object!');
    var isJson = config && config.hasOwnProperty('json') && config.json;
    var obj = isJson ? JSON.parse(JSON.stringify(object)) : object;
    var objStr = '';
    var indent = config && config.hasOwnProperty('indent') && config.indent === 4 ? '    ' : '  ';
    if (!level) level = 0;
    if (obj === null) return null;
    if (obj instanceof Array) {
        if (obj.length > 0) {
            objStr += '[\n';
            level ++;
            for (var i = 0; i < obj.length; i ++) {
                objStr += getBaseIndent(indent, level) + sortValue(obj[i], config, level);
                objStr += i < obj.length - 1 ? ',\n' : '\n';
            }
            level --;
            objStr += getBaseIndent(indent, level) + ']'
        } else {
            objStr += '[]'
        }
    } else {
        if (getObjLength(obj) > 0) {
            objStr += '{\n';
            level ++;
            var i = 0;
            var objLength = getObjLength(obj);
            for(var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    i ++;
                    objStr += isJson ? getBaseIndent(indent, level) + '"' + key + '"' : getBaseIndent(indent, level) + key;
                    objStr += ': ' + sortValue(obj[key], config, level);
                    objStr += i < objLength ? ',\n' : '\n';
                }
            }
            level --;
            objStr += getBaseIndent(indent, level) + '}';
        } else {
            objStr += '{}'
        }
    }
    return objStr;
}

/**
 * 描述: 分类输出格式化后的值
 * @arg value [any]
 * @arg config [object]
 * @arg level [number]
 * */
function sortValue(value, config, level) {
    switch (typeof value) {
        case 'undefined':
        case 'function':
            return String(value);
        case 'string':
            return '"' + value.replace(/"/mg, '\\"') + '"';
        case 'number':
            return value;
        case 'object':
            return formatterObject(value, config, level);
    }
}

/**
 * 描述: 获取对象自有属性的个数
 * @arg obj [object]
 * */
function getObjLength(obj) {
    var objLength = 0;
    for(var key in obj) {
        if (obj.hasOwnProperty(key)) {
            objLength ++;
        }
    }
    return objLength;
}

/**
 * 描述: 根据层数获取缩进值
 * @arg indent [string] 原始缩进值
 * @arg level [number]
 * */
function getBaseIndent(indent, level) {
    var baseIndent = '';
    for (var i = 0; i < level; i ++) {
        baseIndent += indent;
    }
    return baseIndent;
}
